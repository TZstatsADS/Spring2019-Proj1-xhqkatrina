library(tidyverse)
library(mosaic)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(plyr)
library(tidytext)
library(topicmodels)
library(gplots)
# load title image
knitr::include_graphics('../figs/title_pic.jpg')
# load processed_moments and demographic data
clean_hm <- read.csv("../output/processed_moments.csv")
demo <- read.csv("../data/demographic.csv")
# match worker id with their age and merge demographic data with clean_hm data for further analysis
# convert age from factor to numeric
# display the distribution of age
clean_hm <- merge(clean_hm, demo[, c("wid", "age", "gender", "marital",
"parenthood")], by="wid")
clean_hm$age <- as.numeric(clean_hm$age)
ggplot(clean_hm, aes(x = age)) + geom_histogram(color = "black", fill = "blue", binwidth = 1) + scale_x_continuous(breaks = seq(5,100,5))
# create a new variable "age_group", indicating which age group the worker of each happy moment belongs to
clean_hm2 <- clean_hm %>% filter(age >= 18 & age <= 110)
clean_hm2 <- mutate(clean_hm2, age_group = derivedFactor(
"young" = (age >= 18 & age <= 35),
"middle_aged" = (age >= 36 & age <= 55 ),
"older" = (age >= 56),
.default = NA
))
category.bygroup <- clean_hm2 %>% select(predicted_category, age_group) %>%
group_by(age_group, predicted_category) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(freq = n / sum(n))
ggplot(category.bygroup,aes(x = predicted_category, y = freq, fill = age_group))+geom_col(position='dodge') + coord_flip()
# divide data in three groups and load happy moments in each group as a corpus, clean the text (convert all the letters to lower case, remove puntuation, numbers, empty words and extra white space)
create.corpus <- function(df){
words <- Corpus(VectorSource(df$text))
return(words)
}
words.age <- dlply(clean_hm2, .(age_group), create.corpus)
tdm.young <- TermDocumentMatrix(words.age$young) %>% tidy()
tdm.young.freq <- tdm.young %>% group_by(term) %>% dplyr::summarise(count = n())
set.seed(0)
wordcloud(words = tdm.young.freq$term, freq = tdm.young.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
tdm.middle <- TermDocumentMatrix(words.age$middle) %>% tidy()
tdm.middle.freq <- tdm.middle %>% group_by(term) %>% dplyr::summarise(count = n())
wordcloud(words = tdm.middle.freq$term, freq = tdm.middle.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Accent"))
tdm.older <- TermDocumentMatrix(words.age$older) %>% tidy()
tdm.older.freq <- tdm.older %>% group_by(term) %>% dplyr::summarise(count = n())
wordcloud(words = tdm.older.freq$term, freq = tdm.older.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Set1"))
# happy moments provided by workers with empty parenthood status are removed in the following graph
parenthood.bygroup <- clean_hm2 %>% filter(parenthood != "")%>% select(parenthood, age_group) %>%
group_by(age_group, parenthood) %>% dplyr::summarise( n = n()) %>%
dplyr::mutate(freq = n / sum(n))
ggplot(parenthood.bygroup,aes(x = parenthood, y = freq, fill = age_group))+geom_col(position='dodge') + ggtitle("Age Distribution in Parenthood Status")
# # happy moments provided by workers with empty parenthood status are removed for the purpose of the following analysis
words.age.par <- dlply( clean_hm2 %>% filter(parenthood != ""), .(age_group, parenthood), create.corpus)
tdm.young.y <- TermDocumentMatrix(words.age.par$young.y) %>% tidy()
tdm.young.y.freq <- tdm.young.y %>% group_by(term) %>% dplyr::summarise(count = n())
tdm.young.n <- TermDocumentMatrix(words.age.par$young.n) %>% tidy()
tdm.young.n.freq <- tdm.young.n %>% group_by(term) %>% dplyr::summarise(count = n())
par(mfrow = c(1,2), mar = rep(0.5,4) )
wordcloud(words = tdm.young.y.freq$term, freq = tdm.young.y.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = tdm.young.n.freq$term, freq = tdm.young.n.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
tdm.middle.y <- TermDocumentMatrix(words.age.par$middle_aged.y) %>% tidy()
tdm.middle.y.freq <- tdm.middle.y %>% group_by(term) %>% dplyr::summarise(count = n())
tdm.middle.n <- TermDocumentMatrix(words.age.par$middle_aged.n) %>% tidy()
tdm.middle.n.freq <- tdm.middle.n %>% group_by(term) %>% dplyr::summarise(count = n())
par(mfrow = c(1,2), mar = rep(0.5,4) )
wordcloud(words = tdm.middle.y.freq$term, freq = tdm.middle.y.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Accent"))
wordcloud(words = tdm.middle.n.freq$term, freq = tdm.middle.n.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Accent"))
tdm.older.y <- TermDocumentMatrix(words.age.par$older.y) %>% tidy()
tdm.older.y.freq <- tdm.older.y %>% group_by(term) %>% dplyr::summarise(count = n())
tdm.older.n <- TermDocumentMatrix(words.age.par$older.n) %>% tidy()
tdm.older.n.freq <- tdm.older.n %>% group_by(term) %>% dplyr::summarise(count = n())
par(mfrow = c(1,2), mar = rep(0.5,4) )
wordcloud(words = tdm.older.y.freq$term, freq = tdm.older.y.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Set2"))
wordcloud(words = tdm.older.n.freq$term, freq = tdm.older.n.freq$count, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Set2"))
words.all <- create.corpus(clean_hm2)
dtm.all <- DocumentTermMatrix(words.all)
# remove empty rows in the matrix for LDA purpose
dtm.new <-  dtm.all[unique(dtm.all$i),]
words.lda <- LDA(dtm.new, k = 4, control = list(seed = 1234))
words.topics <- tidy(words.lda, matrix = "beta")
top.terms <- words.topics %>%
group_by(topic) %>%
top_n(12, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top.terms %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, nrow = 2, scales = "free") + ggtitle("Most Common Terms within Each Topic") +
coord_flip()+ theme(axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 8))
# document-topic probabilities
doc.topics <- tidy(words.lda, matrix = "gamma") %>%
group_by(document) %>%
top_n(1, gamma) %>%
ungroup()
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "row", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
age.topics
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "column", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
age.topics
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "row", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
age.topics
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "row", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "column", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
age.topics
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "row", key=F,
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "row", key=F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
age.topics
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "row", key=F,
col = bluered(50),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
age.topics
# divide documents based on age group
young.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "young"))
middle.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "middle_aged"))
older.topics <- doc.topics %>% filter(as.numeric(document) %in% which(clean_hm2$age_group == "older"))
# calculate average topic allocation for each group
avg.topics <- function(df){
return(table(df$topic)/nrow(df))
}
age.topics <- matrix( c( avg.topics(young.topics),
avg.topics(middle.topics),
avg.topics(older.topics)),
ncol = 4, byrow = TRUE)
rownames(age.topics) <- c("young", "middle_aged", "older")
colnames(age.topics) <- paste("Topic", 1:4, sep = "")
heatmap.2(age.topics,
scale = "none",key = F,
col = bluered(100),
cexRow = 0.9, cexCol = 0.9, margins = c(8, 8),
trace = "none", density.info = "none")
age.topics
